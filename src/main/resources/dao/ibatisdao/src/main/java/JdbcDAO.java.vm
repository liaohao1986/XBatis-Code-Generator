##DAO实现代码生成模版
##使用到的变量有：
##$!{gb.packageName}包名，如：net.letuu.order
##$!{gb.userName}机器登录用户名，如：microboss
##$!{gb.nowDate}当前日期，如：2013-05-02
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
##宏定义,用于单一对象的删除与查找的参数
#macro(primaryKey)
    #foreach($pkcol in $tbb.pkcol) $!{pkcol.propertyType} $!{pkcol.propertyName}  #if(!$foreach.last), #end #end
    #if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的方法体
#macro( primaryKeyBody )
        Map<String, Object> params = new HashMap<String, Object>();
    #foreach($pkcol in $tbb.pkcol)
        params.put("$!{pkcol.propertyName}", $!{pkcol.propertyName});
    #end
    #if($conf.isSplitTable())
    params.put("tableId", tableId);
    #end
#end
##宏定义,用于多对象的删除与查找的参数
#macro( primaryKeys $tbb )
    #foreach($pkcol in $tbb.pkcol)#if($foreach.last)List<$!{pkcol.propertyType}> $!{pkcol.propertyName}List#else$!{pkcol.propertyType} $!{pkcol.propertyName},#end#end
    #if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的方法体
#macro( primaryKeysBody $tbb )
        Map<String, Object> params = new HashMap<String, Object>();
    #foreach($pkcol in $tbb.pkcol)
        #if($foreach.last)
        params.put("keys", $!{pkcol.propertyName}List);
        #else
        params.put("$!{pkcol.propertyName}", $!{pkcol.propertyName});
        #end
    #end
    #if($conf.isSplitTable())
    params.put("tableId", tableId);
    #end
#end
#set($conf=$!{tbb.conf})
#set($PO = $!{gb.objSuffix})
#set($clear = "")
package $!{gb.packageName}.dao;

import com.ibatis.sqlmap.client.SqlMapClient;
import org.springframework.stereotype.Repository;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
#foreach($cb in $tbb.colList)
#if($!{cb.propertyType}=="Clob"&&!$clob)
import java.sql.Clob;
#set($clob=true)
#elseif($!{cb.propertyType}=="Blob"&&!$blob)
import java.sql.Blob;
#set($blob=true)
#elseif($!{cb.propertyType}=="Date"&&!$d)
import java.util.Date;
#set($d=true)
#elseif($!{cb.propertyType}=="BigDecimal"&&$!bigDecimal)
import java.math.BigDecimal;
#set($bigDecimal=true)
#end
#end
#if($conf.isNeedPage())
import java.util.Collections;

import $!{gb.packageName}.common.Result;
import $!{gb.packageName}.query.$!{tbb.className}Query;
#end
import $!{gb.packageName}.entity.$!{tbb.className}${PO};
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
/**
 * @author  $!{gb.userName}
 * @date    $!{gb.nowDate}
 */

@Repository
public class $!{tbb.className}JdbcDAO extends JdbcDaoSupport {
	
	/** 行映射器 */
    private RowMapper<$!{tbb.className}${PO}> rowMapper = new RowMapper<$!{tbb.className}${PO}>() {
         public $!{tbb.className}${PO} mapRow(ResultSet rs, int rowNum) throws SQLException {
             $!{tbb.className}${PO} $!{tbb.objectName} = new $!{tbb.className}${PO}();
             #foreach($cb in $tbb.colList)
			    $!{tbb.objectName}.set$!{cb.methodName}(rs.get$!{cb.propertyType}("$!{cb.colName}"));
			 #end
             return $!{tbb.objectName};
         }
     };
     
     public Integer insert($!{tbb.className}${PO} $!{tbb.objectName}) throws SQLException{
     		String sql = "INSERT INTO $!{tbb.objectName}(#foreach($cb in $tbb.colList)$!{cb.colName},#end)VALUES(#foreach($cb in $tbb.colList)?,#end)";
     		return getJdbcTemplate().update(sql,
				new Object[] { 
				#foreach($cb in $tbb.colList)
				  #if($!{velocityCount} == $!{tbb.colList.size()})
				    $!{tbb.objectName}.get$!{cb.methodName}()
				  #else
				 	 $!{tbb.objectName}.get$!{cb.methodName}(), 
				  #end
				#end
				}, new int[] {
				#foreach($cb in $tbb.colList)
					#if($!{velocityCount} == $!{tbb.colList.size()})
				    	Types.VARCHAR
				    #else
				 	 	Types.VARCHAR, 
				    #end
				#end
				});
	}
}